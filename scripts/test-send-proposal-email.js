#!/usr/bin/env node
/*
 Usage examples:
   node scripts/test-send-proposal-email.js --to you@example.com \
     --subject "Your Quote" \
     --body "<p>Hi there, your quote is attached.</p>" \
     --title "Test Quote"

 This calls controllers/emailController.sendProposalEmail directly with a mock req/res.
 Requires SMTP/Gmail env to be configured (utils/mail.js).
*/

require('dotenv').config();
const yargs = require('yargs/yargs');
const { hideBin } = require('yargs/helpers');
const { sendProposalEmail } = require('../controllers/emailController');

function buildSimpleHtml({ title = 'Proposal', message = 'Please find your quote attached.' } = {}) {
  return `<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>${title}</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 24px; }
    h1 { margin-bottom: 8px; }
    p { margin: 0 0 12px; }
    .footer { margin-top: 24px; font-size: 12px; color: #666; }
  </style>
</head>
<body>
  <h1>${title}</h1>
  <p>${message}</p>
  <div class="footer">Generated by test-send-proposal-email.js</div>
</body>
</html>`;
}

async function main() {
  const argv = yargs(hideBin(process.argv))
    .option('to', { type: 'string', demandOption: true, describe: 'Recipient email' })
    .option('subject', { type: 'string', default: 'Your Proposal', describe: 'Email subject' })
    .option('body', { type: 'string', default: '<p>Please find your quote attached.</p>', describe: 'Email body (HTML)' })
    .option('title', { type: 'string', default: 'Test Proposal', describe: 'PDF HTML title' })
    .help()
    .argv;

  const htmlContent = buildSimpleHtml({ title: argv.title, message: 'This is a test PDF generated by Puppeteer.' });

  // Mock req/res pattern used in repo scripts
  const req = {
    body: {
      email: argv.to,
      body: argv.body,
      versions: 'v1',
      sendCopy: false,
      htmlContent,
    }
  };

  const res = {
    status(code) { this.statusCode = code; return this; },
    json(payload) {
      // eslint-disable-next-line no-console
      console.log(`[HTTP ${this.statusCode || 200}]`, JSON.stringify(payload));
      return payload;
    }
  };

  try {
    // Directly invoke controller
    await sendProposalEmail(req, res);
    // eslint-disable-next-line no-console
    console.log('✓ Test complete');
    process.exit(0);
  } catch (err) {
    // eslint-disable-next-line no-console
    console.error('✗ Test failed:', err?.message || err);
    process.exit(1);
  }
}

main();
