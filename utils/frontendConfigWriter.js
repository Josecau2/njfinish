const fs = require('fs')
const path = require('path')

// Paths
const FRONTEND_DIR = path.join(__dirname, '..', 'frontend')
const CONFIG_PATH = path.join(FRONTEND_DIR, 'src', 'config', 'customization.js')
const ASSETS_DIR = path.join(FRONTEND_DIR, 'public', 'assets', 'customization')
const RAW_JSON_PATH = path.join(FRONTEND_DIR, 'public', 'assets', 'customization', 'app-customization.json')

// Default fallback (matches shape used in slice)
const FALLBACK = {
  logoText: 'Cabinets',
  logoImage: '/assets/customization/logo.png',
  headerBg: '#000000',
  headerFontColor: '#ffffff',
  sidebarBg: '#0f0f0f',
  sidebarFontColor: '#ffffff',
  logoBg: '#000000',
  companyName: ''
}

function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true })
}

/**
 * Copy logo from uploads (if absolute /uploads path) into frontend assets so it can be served
 * as a stable static file path to avoid flicker while auth/customization loads.
 * Returns the public path to use in config.
 */
function maybeCopyLogo(logoPath) {
  if (!logoPath) return FALLBACK.logoImage
  // Expect something like /uploads/images/<file>
  const uploadsPrefix = '/uploads/'
  if (!logoPath.startsWith(uploadsPrefix)) {
    // Already a relative/static path
    return logoPath
  }
  const absoluteSource = path.join(__dirname, '..', logoPath)
  if (!fs.existsSync(absoluteSource)) {
    return FALLBACK.logoImage
  }
  ensureDir(ASSETS_DIR)
  const fileName = 'logo' + path.extname(absoluteSource)
  const target = path.join(ASSETS_DIR, fileName)
  try {
    fs.copyFileSync(absoluteSource, target)
    return `/assets/customization/${fileName}`
  } catch (e) {
    console.error('Failed copying logo to frontend assets:', e)
    return FALLBACK.logoImage
  }
}

function buildConfigObject(input = {}) {
  const merged = { ...FALLBACK, ...input }
  merged.logoImage = maybeCopyLogo(input.logoImage || merged.logoImage)
  return {
    ...merged,
    _generated: new Date().toISOString(),
    _version: '1.0.0'
  }
}

function generateFileContents(configObj) {
  return `// Frontend customization configuration\n// This file is automatically generated when customizations are saved\n// DO NOT edit manually - changes will be overwritten\n\nexport const CUSTOMIZATION_CONFIG = ${JSON.stringify(configObj, null, 2)}\n\nexport default CUSTOMIZATION_CONFIG\n`
}

async function writeFrontendCustomization(input) {
  const cfg = buildConfigObject(input)
  ensureDir(path.dirname(CONFIG_PATH))
  fs.writeFileSync(CONFIG_PATH, generateFileContents(cfg), 'utf-8')
  try {
    ensureDir(ASSETS_DIR)
    fs.writeFileSync(RAW_JSON_PATH, JSON.stringify(cfg), 'utf-8')
  } catch (e) {
    console.warn('Could not write raw app customization JSON:', e?.message)
  }
  return cfg
}

module.exports = { writeFrontendCustomization }
